# Faster linking?
[target.x86_64-pc-windows-msvc]
linker = "lld-link.exe"

# https://doc.rust-lang.org/cargo/reference/profiles.html
# profile.dev = no --release
# fast to compile, okay enough to run
[profile.dev]
opt-level = 2
debug = true
debug-assertions = true
overflow-checks = true

# https://doc.rust-lang.org/cargo/reference/profiles.html#lto
#
# >false: Performs "thin local LTO" which performs "thin" LTO on the local crate
# >only across its codegen units.
# >No LTO is performed if codegen units is 1 or opt-level is 0.
#
# >"off": Disables LTO.
#
# who came up with this
lto = "off"

panic = 'abort'
incremental = false
codegen-units = 16
rpath = false

[profile.release]
opt-level = 2
debug = false
debug-assertions = false
overflow-checks = false
lto = false
panic = 'abort'
incremental = false
codegen-units = 16
rpath = false

# Build all dependencies optimized, but reduce optimization for this crate
# Only enable incremental builds for this crate
[profile.dev.package.padsynth]

# At opt-level=1 with lto=false, editing main() takes 40 seconds to rebuild.
# At opt-level=1 with lto="off", editing main() takes 30 seconds to rebuild.
# At opt-level=0, editing main() takes 12 seconds to rebuild.
opt-level = 0
incremental = true

# Only enable incremental builds for this crate
[profile.release.package.padsynth]
incremental = true
